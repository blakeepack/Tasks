y[y>0]
x[x >0]
-- x[!is.na(x)x>0]
x[!is.na(x)x>0]
x[!is.na(x) & x > 0]
x[c(3, 5,7)]
x(i.e. x[0])
x (i.e. x[0])
(i.e. x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 20:1
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4rows, 5columns)
my_matrix2 <- matrix(1:20, 4 rows, 5 columns)
my_matrix2 <- matrix()
my_matrix2 <- matrix( 1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- vect["Bill", "Gina", "Kelly", "Sean"]
patients <- vect["Bill, Gina, Kelly, Sean"]
patients <- vect["Bill", "Gina", "Kelly", "Sean"]
patients <- c["Bill", "Gina", "Kelly", "Sean"]
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
==
TRUE==TRUE
False==true
FALSE==TRUE
FALSE == TRUE
(FALSE == TRUE) ==FALSE
6==7
6<7
10<=10
5/=7
5==7
5!=7
!TRUE 5==7
!TRUE5==7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE|| c(TRUE, FALSE, FALSE)
5>8 || 6 !=8 && 4> 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5)
c(2, 4, 5)
mean(c(2, 4, 5))
test_func1()
test_funs1(x)
x
boring_function.R
"boring_function('My first function!')"
boring_function.R
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
reamiander (11/5)
reamiander (11, 5)
reamainder (11, 5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder( 4, div = 2)
args(remainder)
func(dat)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(anonymous(c(8, 4, 0)))
evaluate(c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is","fun!")
submit()
telegram()
submit()
mad_libs(place = "Fayetteville", adjustive = "wild", noun = "person")
submit()
"I"%p% "love"%p%"R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x, y)
plot( x= cars$speed, y= cars$dist)
plot( x= cars$dist, y= cars$speed)
plot( x= cars$speed, y = cars$dist, xlab = "Speed")
plot( x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance ")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim= c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~ cyl, data =mtcars)
hist(mtcars$mpg)
source("http://jonsmitchell.com/code/plotFxn02b.R")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" , stringsAsFactors=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x)paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event =="birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age),]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)#
#
Feeds <- which(beren3$event == "bottle")#
#
avgMilk <- mean(beren3$value[Feeds])#
# fluid oz#
#because it contains the numerical measurement#
#It calls back to the previously set object that we set for the event bottle#
avgFeed <- tapply(beren3$value [Feeds], beren3$age[Feeds], mean, na.rm=T)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var, na.rm=T)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum, na.rm=T)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h= avgFeed, lty=2, col='red')#
#
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)#
#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')
source("http://jonsmitchell.com/code/plotFxn02b.R")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
unique(event)
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" ,
uinique(event)
unique(event)
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" , stringsAsFactors=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:5, 1:3]#
beren<- Data#
Feeds <- which(beren[,9] =="Nap")#
berenNap <- beren[Feeds,]#
head(berenNap)#
Feeds <- which(beren[,"event"] == "Nap")#
Feeds <- which(beren$event == "Nap")#
dayID <- apply(beren, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format= "%Y-%n-%d", origin = "2019-04-18")#
beren$age <- dateID - dateID[which(beren$event =="birth")]#
head(beren)#
beren2 <- beren#
beren3 <- beren2[order(beren2$age) ,]
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)
# set up directory & data#
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
#
# make a nap duration column#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart
anything <- beren4
head(anything)
which(beren4==179)
which(beren4<179)
berenYounger <- which(beren<179)
slope(berenYounger)
mean(berenYounger)
# set up directory & data#
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
#
# make a nap duration column#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
#
# use which() to find the row that == the thing#
keyDate <- which(beren4$event == "")
# use which() to find the row that == the thing#
keyDate <- grep("sleep", beren4$event)
keyDate
grep("thru", beren4$event)
unique(beren4$event)
keyDate <- beren3[grep("sleep", beren3$event),"age"]
keyDate
beren3[c(179,187),]
beren3[grep("sleep", beren3$event),]
# use which() to find the row that == the thing#
keyDate <- beren3[grep("sleeping_thru", beren3$event),"age"]
# use which() to find the row that == the thing#
keyDate <- beren3[grep("sleeping_thru", beren3$event),"age"]
keyDate
beren4
youngerDays <- which(beren4$age < "sleeping_thru")
mean(youngerDays)
head(youngerDays)
head(youngerDays)
mean(youngerDays)
plot(as.numeric(names(youngerDays)), youngerDays, type="b", pch=16, xlab="age", ylab="naptime")youngerDays)
youngerDays <- which(beren4$age < "keyDate")
plot(as.numeric(names(youngerDays)), youngerDays, type="b", pch=16, xlab="age", ylab="naptime")youngerDays)
youngerDays
keyDate
which(bveren4$age < keyDate)
which(beren4$age < keyDate)
beren4[which(beren4$age < keyDate),]
beren4[which(beren4$age < keyDate),]
x <- letters
x
x[2]
x <- rbind(letters, sample(letters))
x
x[2]
x[2,2]
x[2,]
x[,2]
# use which() to find the row that == the thing#
keyDate <- beren3[grep("sleeping_thru", beren3$event),"age"]#
#
# use which() to find which rows are < the thing#
youngerDays <- which(beren4$age < keyDate)#
youngerBeren <- beren4[youngerDays,]
youngerBeren
# calculate the mean or slope or whatever you need for berenYounger#
Slope <- lm(naplength~age, data=youngerBeren)$coef
Slope
# calculate the mean or slope or whatever you need for berenYounger#
Slope <- lm(naplength~age, data=youngerBeren)$coef[2]
Slope
# calculate the mean or slope or whatever you need for berenYounger#
youngerSlope <- lm( naplength ~ age, data=youngerBeren)$coef[2]
olderDays <- beren3[which(beren4$age > keyDate)]
olderDays <- which(beren4$age > keyDate)
olderBeren <- beren4[olderDays,]
olderBeren
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
#
# make a nap duration column#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart
keyDate <- beren3[grep("sleeping_thru", beren3$event),"age"]#
#
# use which() to find which rows are < the thing#
youngerDays <- which(beren4$age < keyDate)#
youngerBeren <- beren4[youngerDays,]#
#
# calculate the mean or slope or whatever you need for berenYounger#
youngerSlope <- lm( naplength ~ age, data=youngerBeren)$coef[2]
olderDays <- which(beren4$age > keyDate)#
olderBeren <- beren4[olderDays,]
olderBeren
olderSlope <- m( naplength ~ age, data=olderBeren)$coef[2]
olderSlope <- lm( naplength ~ age, data=olderBeren)$coef[2]
head(olderBeren)
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)
# first option: two scatterplots#
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)
# calculate the mean or slope or whatever you need for berenYounger#
youngerSlope <- lm( naplength ~ age, data=youngerBeren)#
#
# repeat above steps for which rows are > the thing#
#
#Use which() to find the rows are > the thing#
olderDays <- which(beren4$age > keyDate)#
olderBeren <- beren4[olderDays,]#
#Calculate the mean or slope of the rate #
olderSlope <- lm( naplength ~ age, data=olderBeren)$coef[2]#
#
#Co#
#
# first option: two scatterplots#
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)
# first option: two scatterplots#
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)#
plot(olderBeren$age, olderBeren$naplength)#
abline(olderSlope)
#Use which() to find the rows are > the thing#
olderDays <- which(beren4$age > keyDate)#
olderBeren <- beren4[olderDays,]#
#Calculate the mean or slope of the rate #
olderSlope <- lm( naplength ~ age, data=olderBeren)#
#
#Co#
#
# first option: two scatterplots#
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)#
plot(olderBeren$age, olderBeren$naplength)#
abline(olderSlope)
# first option: two scatterplots#
par(mfrow=c(2,1))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)#
plot(olderBeren$age, olderBeren$naplength)#
abline(olderSlope)
# first option: two scatterplots#
par(mfrow=c(2,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)#
plot(olderBeren$age, olderBeren$naplength)#
abline(olderSlope)
# first option: two scatterplots#
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)#
plot(olderBeren$age, olderBeren$naplength)#
abline(olderSlope)
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(0,250))
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(10,250))
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(100,250))
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(100,250))#
points(olderBeren$age, olderBeren$naplengthm pch=16, col="blue")
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(100,250))#
points(olderBeren$age, olderBeren$naplength, pch=16, col="blue")
youngerSlope
youngerSlope$coef
summary(youngerSlope)
summary(youngerSlope)$coef
yS <- summary(youngerSlope)$coef[2,1:2]#
oS <- summary(olderSlope)$coef[2,1:2]#
#
boxplot(rnorm(1e3, yS[1], yS[2]), rnorm(1e3, oS[1], oS[2]))
# first option: two scatterplots#
par(mfrow=c(1,2))#
plot(youngerBeren$age, youngerBeren$naplength)#
abline(youngerSlope)#
plot(olderBeren$age, olderBeren$naplength)#
abline(olderSlope)
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(100,250))#
points(olderBeren$age, olderBeren$naplength, pch=16, col="blue")
par(mfrow=c(1,1))#
plot(youngerBeren$age, youngerBeren$naplength, pch=16, col="red", xlim=c(100,250))#
points(olderBeren$age, olderBeren$naplength, pch=16, col="blue")
yS <- summary(youngerSlope)$coef[2,1:2]#
oS <- summary(olderSlope)$coef[2,1:2]#
#
boxplot(rnorm(1e3, yS[1], yS[2]), rnorm(1e3, oS[1], oS[2]))
yS <- summary(youngerSlope)$coef[2,1:2]#
oS <- summary(olderSlope)$coef[2,1:2]#
boxplot(rnorm(1e3, yS[1], yS[2]), rnorm(1e3, oS[1], oS[2]))
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
Growth <- which(beren3$event == "trait_mass")#
cor(Growth, beren3$age[Growth])#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck =-0.01)#
plot(as.numeric(names(Growth~beren3$age[Growth])), type="b", pch=16, xlab="age in days", ylab="mass in kg", xlim=c(0, 218), ylim=c(4, 10))
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
Growth <- which(beren3$event == "trait_mass")#
cor(Growth, beren3$age[Growth])#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck =-0.01)#
plot(as.numeric(names(Growth~beren3$age[Growth])), type="b", pch=16, xlab="age in days", ylab="mass in kg", xlim=c(0, 218), ylim=c(4, 10))
