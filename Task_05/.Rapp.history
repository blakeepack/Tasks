file.rename("mytest.R" "to" "mytest.R2")
file.rename( mytest.R "to" mytest.R2)
file.rename()
file.rename("mytest.R","mytest.R2")
file.rename("mytest.R" , "mytest.R2")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3')
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
set.wd(old.dir)
set.wd("old.dir")
set.wd("test.dir")
set.wd(testdir)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times+10)
rep(c(0,1,2), times=10)
Try rep(c(0, 1, 2), each =10)
rep(c(0, 1, 2), each =10)
x<-c(44,NA, 5, NA)
x*3
y<- rnorm(1000)
z<- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z))
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == Na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x >0]
-- x[!is.na(x)x>0]
x[!is.na(x)x>0]
x[!is.na(x) & x > 0]
x[c(3, 5,7)]
x(i.e. x[0])
x (i.e. x[0])
(i.e. x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 20:1
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4rows, 5columns)
my_matrix2 <- matrix(1:20, 4 rows, 5 columns)
my_matrix2 <- matrix()
my_matrix2 <- matrix( 1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- vect["Bill", "Gina", "Kelly", "Sean"]
patients <- vect["Bill, Gina, Kelly, Sean"]
patients <- vect["Bill", "Gina", "Kelly", "Sean"]
patients <- c["Bill", "Gina", "Kelly", "Sean"]
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
==
TRUE==TRUE
False==true
FALSE==TRUE
FALSE == TRUE
(FALSE == TRUE) ==FALSE
6==7
6<7
10<=10
5/=7
5==7
5!=7
!TRUE 5==7
!TRUE5==7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE|| c(TRUE, FALSE, FALSE)
5>8 || 6 !=8 && 4> 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5)
c(2, 4, 5)
mean(c(2, 4, 5))
test_func1()
test_funs1(x)
x
boring_function.R
"boring_function('My first function!')"
boring_function.R
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
reamiander (11/5)
reamiander (11, 5)
reamainder (11, 5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder( 4, div = 2)
args(remainder)
func(dat)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(anonymous(c(8, 4, 0)))
evaluate(c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is","fun!")
submit()
telegram()
submit()
mad_libs(place = "Fayetteville", adjustive = "wild", noun = "person")
submit()
"I"%p% "love"%p%"R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x, y)
plot( x= cars$speed, y= cars$dist)
plot( x= cars$dist, y= cars$speed)
plot( x= cars$speed, y = cars$dist, xlab = "Speed")
plot( x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance ")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim= c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~ cyl, data =mtcars)
hist(mtcars$mpg)
source("http://jonsmitchell.com/code/plotFxn02b.R")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" , stringsAsFactors=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x)paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event =="birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age),]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)#
#
Feeds <- which(beren3$event == "bottle")#
#
avgMilk <- mean(beren3$value[Feeds])#
# fluid oz#
#because it contains the numerical measurement#
#It calls back to the previously set object that we set for the event bottle#
avgFeed <- tapply(beren3$value [Feeds], beren3$age[Feeds], mean, na.rm=T)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var, na.rm=T)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum, na.rm=T)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h= avgFeed, lty=2, col='red')#
#
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)#
#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')
source("http://jonsmitchell.com/code/plotFxn02b.R")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
Data <- read.csv("https://www.geosociety.org/documents/gsa/timescale/timescl.pdf")
read.csv("https://www.geosociety.org/documents/gsa/timescale/timescl.pdf")
simpop(50, 500, h=2, s=0.75)
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h=1, s=0)
setwd('~/Desktop/Evolution/Tasks/Task_05')#
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h=1, s=0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type="l",xlab="generation", ylab= "allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,1], lwd=2, col='red' )
legend("topleft", legend=c ("a", "b"), col=c("black", "red"), lwd=2, bty="n")
plotFit(nruns=50, n=20, ngens=100, init_p=0.5, h=1.5, s=0.1)
plotFit(nruns=10, n=20, ngens=30, init_p=0.5, h=1, s=0.5)
plotFit(nruns=10, n=20, ngens=30, init_p=0.5, h=1, s=0.5)
plotFit(nruns=10, n=20, ngens=30, init_p=0.5, h=1, s=0.5)
plotFit(nruns=10, n=100, ngens=30, init_p=0.5, h=1, s=0.5)
plotFit(nruns=10, n=100, ngens=30, init_p=0.5, h=1, s=0.5)
plotFit(nruns=100, n=100, ngens=30, init_p=0.5, h=1, s=0.5)
plotFit(nruns=100, n=100, ngens=30, init_p=0.5, h=1, s=0.1)
plotFit(nruns=100, n=100, ngens=30, init_p=0.5, h=-1, s=0.5)
plotFit(nruns=100, n=100, ngens=30, init_p=0.5, h=2, s=0.5)
plotFit(nruns=100, n=30, ngens=30, init_p=0.5, h=2, s=0.5)
plotFit(nruns=100, n=30, ngens=30, init_p=0.5, h=2, s=1)
plotFit(nruns=100, n=30, ngens=30, init_p=0.5, h=2, s=0)
plotFit(nruns=100, n=30, ngens=50, init_p=0.5, h=2, s=0)
plotFit(nruns=100, n=30, ngens=50, init_p=0.5, h=2, s=.1)
plotFit(nruns=100, n=30, ngens=50, init_p=0.5, h=1, s=.1)
plotFit(nruns=100, n=100, ngens=50, init_p=0.5, h=1, s=.1)
plotFit(nruns=100, n=100, ngens=50, init_p=0.5, h=1, s=.5)
plotFit(nruns=50, n=100, ngens=50, init_p=0.5, h=1, s=.8)
plotFit(nruns=50, n=100, ngens=50, init_p=0.5, h=1, s=.03)
plotFit(nruns=50, n=100, ngens=50, init_p=0.5, h=1, s=.01)
plotFit(nruns=50, n=100, ngens=100, init_p=0.5, h=1, s=.01)
plotFit(nruns=50, n=100, ngens=100, init_p=0.5, h=2, s=.01)
plotFit(nruns=50, n=100, ngens=100, init_p=0.5, h=2, s=.5)
plotFit(nruns=50, n=100, ngens=100, init_p=0.5, h=2, s=-.5)
plotFit(nruns=50, n=100, ngens=100, init_p=0.5, h=2, s=.67)
plotFit(nruns=50, n=100, ngens=100, init_p=0.5, h=1, s=.67)
