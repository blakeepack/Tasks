setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times+10)
rep(c(0,1,2), times=10)
Try rep(c(0, 1, 2), each =10)
rep(c(0, 1, 2), each =10)
x<-c(44,NA, 5, NA)
x*3
y<- rnorm(1000)
z<- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z))
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == Na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x >0]
-- x[!is.na(x)x>0]
x[!is.na(x)x>0]
x[!is.na(x) & x > 0]
x[c(3, 5,7)]
x(i.e. x[0])
x (i.e. x[0])
(i.e. x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 20:1
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4rows, 5columns)
my_matrix2 <- matrix(1:20, 4 rows, 5 columns)
my_matrix2 <- matrix()
my_matrix2 <- matrix( 1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- vect["Bill", "Gina", "Kelly", "Sean"]
patients <- vect["Bill, Gina, Kelly, Sean"]
patients <- vect["Bill", "Gina", "Kelly", "Sean"]
patients <- c["Bill", "Gina", "Kelly", "Sean"]
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
==
TRUE==TRUE
False==true
FALSE==TRUE
FALSE == TRUE
(FALSE == TRUE) ==FALSE
6==7
6<7
10<=10
5/=7
5==7
5!=7
!TRUE 5==7
!TRUE5==7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE|| c(TRUE, FALSE, FALSE)
5>8 || 6 !=8 && 4> 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5)
c(2, 4, 5)
mean(c(2, 4, 5))
test_func1()
test_funs1(x)
x
boring_function.R
"boring_function('My first function!')"
boring_function.R
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
reamiander (11/5)
reamiander (11, 5)
reamainder (11, 5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder( 4, div = 2)
args(remainder)
func(dat)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(anonymous(c(8, 4, 0)))
evaluate(c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is","fun!")
submit()
telegram()
submit()
mad_libs(place = "Fayetteville", adjustive = "wild", noun = "person")
submit()
"I"%p% "love"%p%"R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x, y)
plot( x= cars$speed, y= cars$dist)
plot( x= cars$dist, y= cars$speed)
plot( x= cars$speed, y = cars$dist, xlab = "Speed")
plot( x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance ")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim= c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~ cyl, data =mtcars)
hist(mtcars$mpg)
source("http://jonsmitchell.com/code/plotFxn02b.R")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" , stringsAsFactors=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x)paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event =="birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age),]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)#
#
Feeds <- which(beren3$event == "bottle")#
#
avgMilk <- mean(beren3$value[Feeds])#
# fluid oz#
#because it contains the numerical measurement#
#It calls back to the previously set object that we set for the event bottle#
avgFeed <- tapply(beren3$value [Feeds], beren3$age[Feeds], mean, na.rm=T)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var, na.rm=T)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum, na.rm=T)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h= avgFeed, lty=2, col='red')#
#
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)#
#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')
source("http://jonsmitchell.com/code/plotFxn02b.R")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
Data <- read.csv("https://www.geosociety.org/documents/gsa/timescale/timescl.pdf")
read.csv("https://www.geosociety.org/documents/gsa/timescale/timescl.pdf")
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
#
#Part 4 #
HWE <- function(p)  { #
	aa <- p^2#
	ab <- 2 * p * (1-p)#
	bb <- (1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
	HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by= 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")#
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")#
#
#Lets simulate a population#
Pop <- simPop(500)#
#
#now add the points #
points(Pop[, "freqa"], Pop[, "Genotypes.aa"]/500, pch=21, bg="red")
setwd('~/Desktop/Evolution/Tasks/Task_04')#
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
#
#Now take a sample of each population#
Size <- 50#
#
Sample1 <- sample(population1, Size)#
#
Sample2 <- sample(population2, Size)#
#
boxplot(Sample1, Sample2)#
#
# Part 3#
#
source("http://jonsmitchell.com/code/simFxn04.R")#
#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
#
#Now we make alan #
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
#
Focus <- makeBaby(Brenda, Alan)#
ToMom <- length(grep("mom", Focus))/length(Focus)#
#
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)#
#
Sibling_01 <- makeBaby(Brenda, Alan)#
#
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)#
#
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))#
#
#Summarize the data using quantiles#
quantile(ManySiblings)#
mean(ManySiblings)#
#
#And we can also plot the data #
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
#
#Part 4 #
HWE <- function(p)  { #
	aa <- p^2#
	ab <- 2 * p * (1-p)#
	bb <- (1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
	HWE(0.5)#
	#Make a blank plot#
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
#
#Calculate genotype frequencies #
p <- seq(from=0, to=1, by= 0.01)#
GenoFreq <- t(sapply(p, HWE))#
#
#plot our known allele frequency against our expected genotype frequencies #
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
#
#now the other genotypes#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")#
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")#
#
#Lets simulate a population#
Pop <- simPop(500)#
#
#now add the points #
points(Pop[, "freqa"], Pop[, "Genotypes.aa"]/500, pch=21, bg="red")#
#
#another population with a smaller population#
Pop <- simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=22, bg="red")#
#
#Part 5 #
install.packages("learnPopGen", dep=T)#
library(learnPopGen)#
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x), nrow(simPop(x, 500)))
text <- sapply(Samples, function(x) nrow(simPop(x, 500)))
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
#
#Now take a sample of each population#
Size <- 50#
#
Sample1 <- sample(population1, Size)#
#
Sample2 <- sample(population2, Size)
Sample1
sample2
Sample2
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")#
#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
#
#Now we make alan #
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
#
Focus <- makeBaby(Brenda, Alan)
Brenda
Focus
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMomMom
ToMomDad
ToDadMom <- length(grep("grandma_mom", Focus))/length(Focus)
ToDadMom <- length(grep("grandma_dad", Focus))/length(Focus)
ToDadDad <- length(grep("grandpa_dad", Focus))/length(Focus)
ToDadDad
ToDadMom
ToDadMom <- length(grep("grandma_da", Focus))/length(Focus)
ToDadDad <- length(grep("grandpa_da", Focus))/length(Focus)
ToDadDad
ToDadMom
Sibling_01
library(learnPopGen)
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
#
#Now take a sample of each population#
Size <- 50#
#
Sample1 <- sample(population1, Size)#
#
Sample2 <- sample(population2, Size)#
#comparing the different samples question, they are slightly different but ranges overlap almost entriely excpet for sample 2's being slightly shorter#
boxplot(Sample1, Sample2)#
#
# Part 3#
#
source("http://jonsmitchell.com/code/simFxn04.R")#
#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
#
#Now we make alan #
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
#
Focus <- makeBaby(Brenda, Alan)#
#
#They should share half I would think#
ToMom <- length(grep("mom", Focus))/length(Focus)#
# I would think they would share half again as they make up the entirety of the mother who makes up half. I figured it would be 0.25 each but it is not at all like that with the grandma making up 0.4724 and the grandfather making up 0.0276. #
#
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)#
ToDadMom <- length(grep("grandma_da", Focus))/length(Focus)#
ToDadDad <- length(grep("grandpa_da", Focus))/length(Focus)#
#
#Focus is not equally related to any of the grandparents maternal or paternal with the realtionships following like this to mommom= 0.4724, momdad=0.0276, daddad=0.34605, and dadmom=0.15395. The average relatedness is 0.25 but Idk if I added them up right honestly.#
Sibling_01 <- makeBaby(Brenda, Alan)#
#I would imagine siblings would share 50% of their DNA with the siblings but I'm unsure of how to actually test it#
#
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)#
#
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))#
#
#Summarize the data using quantiles#
quantile(ManySiblings)#
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p)  { #
	aa <- p^2#
	ab <- 2 * p * (1-p)#
	bb <- (1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
	HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by= 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")
setwd('~/Desktop/Evolution/Tasks/Task_04')#
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
#
#Now take a sample of each population#
Size <- 50#
#
Sample1 <- sample(population1, Size)#
#
Sample2 <- sample(population2, Size)#
#comparing the different samples question, they are slightly different but ranges overlap almost entriely excpet for sample 2's being slightly shorter#
boxplot(Sample1, Sample2)#
#
# Part 3#
#
source("http://jonsmitchell.com/code/simFxn04.R")#
#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
#
#Now we make alan #
Alan <- makeBaby(PatGrandma, PatGrandpa)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
#
Focus <- makeBaby(Brenda, Alan)#
#
#They should share half I would think#
ToMom <- length(grep("mom", Focus))/length(Focus)#
# I would think they would share half again as they make up the entirety of the mother who makes up half. I figured it would be 0.25 each but it is not at all like that with the grandma making up 0.4724 and the grandfather making up 0.0276. #
#
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)#
ToDadMom <- length(grep("grandma_da", Focus))/length(Focus)#
ToDadDad <- length(grep("grandpa_da", Focus))/length(Focus)#
#
#Focus is not equally related to any of the grandparents maternal or paternal with the realtionships following like this to mommom= 0.4724, momdad=0.0276, daddad=0.34605, and dadmom=0.15395. The average relatedness is 0.25 but Idk if I added them up right honestly.#
Sibling_01 <- makeBaby(Brenda, Alan)#
#I would imagine siblings would share 50% of their DNA with the siblings but I'm unsure of how to actually test it#
#
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)#
#
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))#
#
#Summarize the data using quantiles#
quantile(ManySiblings)#
mean(ManySiblings)#
#
#And we can also plot the data #
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
#It follows with a bell curve distribution and things on the outer edge are not as common due to random recombinations or just in part due to the randomness of the creation of a new person and what will actually get passed on #
#
#Part 4 #
HWE <- function(p)  { #
	aa <- p^2#
	ab <- 2 * p * (1-p)#
	bb <- (1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
	HWE(0.5)#
	#Make a blank plot#
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
#
#Calculate genotype frequencies #
p <- seq(from=0, to=1, by= 0.01)#
GenoFreq <- t(sapply(p, HWE))#
#
#plot our known allele frequency against our expected genotype frequencies #
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
#
#now the other genotypes#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")#
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")#
#
#Lets simulate a population#
Pop <- simPop(500)#
#
#now add the points #
points(Pop[, "freqa"], Pop[, "Genotypes.aa"]/500, pch=21, bg="red")#
#
#another population with a smaller population#
Pop <- simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=22, bg="red")#
#
#Part 5 #
install.packages("learnPopGen", dep=T)#
library(learnPopGen)#
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)#
#
PopSizes <- 5:50#
Samples <- rep(PopSizes, 5)#
#
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))#
#
Line <- lm(tExt ~ Samples)#
summary(Line)#
#
Line$coef#
#
plot(Samples, tExt)#
abline(Line)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
